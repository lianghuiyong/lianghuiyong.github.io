[{"title":"自定义按钮ShapeButton","date":"2017-02-28T11:34:35.000Z","path":"2017/02/28/自定义按钮ShapeButton/","text":"开发时，为了一个简单的按钮要写一堆的样式代码，我表示我在写假代码。 地址Github 地址 可定制属性123456app:stroke :细线宽度app:radius :拐角宽度app:normalColor :按钮颜色app:pressColor :按钮选中颜色app:stroke_normalColor :细线颜色app:stroke_pressColor :细线选中后的颜色 示例图代码12345678910&lt;com.better.customui.widget.ShapeButton android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"123456\" android:textColor=\"#FF44FF\" app:pressColor=\"#2F000000\" app:radius=\"3dip\" app:stroke=\"0.5dip\" app:stroke_normalColor=\"#553355\" app:stroke_pressColor=\"#8F553355\" /&gt; 12345678&lt;com.better.customui.widget.ShapeButton android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"123456\" android:textColor=\"#FF44FF\" app:normalColor=\"#FF3988D2\" app:pressColor=\"#9F3988D2\" app:radius=\"3dp\" /&gt;","tags":[{"name":"Android 自定义UI","slug":"Android-自定义UI","permalink":"http://lianghuiyong.online/tags/Android-自定义UI/"}]},{"title":"通过系统通讯录获取联系人号码","date":"2017-02-28T11:26:27.000Z","path":"2017/02/28/通过系统通讯录获取联系人号码/","text":"1、点击跳转到通讯录界面123Uri uri = Uri.parse(\"content://contacts/people\");Intent intent = new Intent(Intent.ACTION_PICK, uri);startActivityForResult(intent, 0); 2、获取通讯录姓名和手机号码12345678910111213141516171819202122232425262728293031323334353637@Overrideprotected void onActivityResult(int requestCode, int resultCode, Intent data) &#123; switch (requestCode) &#123; case 0: if (data == null) &#123; return; &#125; //处理返回的data,获取选择的联系人信息 Uri uri = data.getData(); String[] contacts = getPhoneContacts(uri); photoNo.setText(contacts[1]); break; &#125;&#125;private String[] getPhoneContacts(Uri uri) &#123; String[] contact = new String[2]; //得到ContentResolver对象 ContentResolver cr = getContentResolver(); //取得电话本中开始一项的光标 Cursor cursor = cr.query(uri, null, null, null, null); if (cursor != null) &#123; cursor.moveToFirst(); //取得联系人姓名 int nameFieldColumnIndex = cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME); contact[0] = cursor.getString(nameFieldColumnIndex); //取得电话号码 String ContactId = cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts._ID)); Cursor phone = cr.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, ContactsContract.CommonDataKinds.Phone.CONTACT_ID + \"=\" + ContactId, null, null); if (phone != null) &#123; phone.moveToFirst(); contact[1] = phone.getString(phone.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)); &#125; phone.close(); cursor.close(); &#125; else &#123; return null; &#125; return contact;&#125; 3、权限12&lt;uses-permission android:name=\"android.permission.READ_CONTACTS\" /&gt;&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;","tags":[{"name":"Android","slug":"Android","permalink":"http://lianghuiyong.online/tags/Android/"}]},{"title":"GitHub使用Hexo搭建博客与版本控制","date":"2017-02-20T15:16:30.205Z","path":"2017/02/20/Github使用hexo搭建博客与版本控制/","text":"一. 本地准备工作1、安装Node.js、Git 二. 创建github仓库（以以下规则为准）1、仓库名：github名.github.io（lianghuiyong.github.io） 2、创建时勾选Initialize this repository with a README，会自动创建master分支 3、创建仓库分支hexo 1) 本地新建一个文件夹test 2) test文件夹里鼠标右键选择Git bash，输入以下指令： 123456git initgit remote add origin https://github.com/github名/github名.github.io.gitgit pull origin mastergit branch hexogit checkout hexogit push origin hexo git常用命令12分支master（展示网页的分支必须是master），用于放hexo生成的静态网站文件。分支hexo（这个可以随意取），用于存储hexo文件。 三. 第一次初始化hexo项目（不是从自己的github仓库下载过来的hexo工程文件）注：本地电脑要与github通过验证，git提交协议有ssh，HTTPS等验证方式，我用的HTTPS。 在自己创建的博客目录里鼠标右键选择Git bash，输入以下指令：1、获取hexo工程目录1npm install -g hexo-cli 2、初始化hexo，现在我感觉就是初始化hexo工程根目录下的_config.yml：1hexo init 3、下载主题，默认的没用过，我用的yilia1git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 4、配置主题，打开hexo根目录下的_config.yml：theme: yilia （注意：后有个空格） 5、在上面打开的_config.yml文件，配置hexo生成的静态网页提交仓库地址（注意空格）1234deploy: type: git repo: https://github.com/github名/github名.github.io.git branch: master 6、生成gitahub静态博客123hexo cleanhexo ghexo d 7、在浏览器上打开 http://github名.github.io.git ，看看有没有效果 四. 项目目录搭建好后，将hexo工程目录提交到github的hexo分支1、将hexo工程下的.deploy_git删除 2、进themes/yilia把 .git隐藏目录删除 3、进到hexo工程根目录，初始化git1git init 4、添加github仓库地址1git remote add origin https://github.com/github名/github名.github.io.git 5、获取github的hexo分支1git pull origin hexo 6、本地切换到hexo分支1git checkout hexo 7、添加hexo工程目录到git新节点12git add .git commit -m \"updata hexo\" 8、提交新节点到github仓库1git push origin hexo 五. 初始化项目目录后或者从github的hexo分支获取到hexo工程目录附：从hithub获取hexo目录 123451）、创建一个博客文件夹，进去并初始化 git init git remote add origin https://github.com/github名/github名.github.io.git2）、获取hexo分支目录 git pull origin hexo 1、写静态博客123hexo new “***”hexo ghexo d 拓展使用Android Studio等编译器来版本控制博客项目文件 git config core.longpaths true","tags":[{"name":"GitHub Pages","slug":"GitHub-Pages","permalink":"http://lianghuiyong.online/tags/GitHub-Pages/"},{"name":"Hexo","slug":"Hexo","permalink":"http://lianghuiyong.online/tags/Hexo/"},{"name":"版本管理","slug":"版本管理","permalink":"http://lianghuiyong.online/tags/版本管理/"}]},{"title":"打包出现： Cannot merge new index 65725 into a non-jumbo instruction!","date":"2017-02-20T02:46:37.000Z","path":"2017/02/20/打包出现：-Cannot-merge-new-index-65725-into-a-non-jumbo-instruction/","text":"1、build.gradle里添加12345android &#123; dexOptions &#123; jumboMode true &#125;&#125;","tags":[{"name":"Android","slug":"Android","permalink":"http://lianghuiyong.online/tags/Android/"}]},{"title":"Android JCenter仓库搭建","date":"2016-12-21T08:22:23.000Z","path":"2016/12/21/Android-JCenter仓库搭建/","text":"JCenter准备 用GitHub账号登陆bintray。 新建仓库，Add New Repository 库工程 创建AS项目 工程内创建Module(Android Librarys)以下修改都是在Module内修改的 build.gradle 1234567891011121314151617181920212223242526272829303132333435363738394041apply plugin: 'com.android.library'buildscript &#123; repositories &#123; jcenter() &#125; dependencies &#123; classpath 'com.android.tools.build:gradle:2.2.3' classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7' classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5' &#125;&#125;android &#123; compileSdkVersion 25 buildToolsVersion \"25.0.0\" defaultConfig &#123; minSdkVersion 15 targetSdkVersion 25 versionCode 1 versionName \"0.0.3\" testInstrumentationRunner \"android.support.test.runner.AndroidJUnitRunner\" &#125; buildTypes &#123; release &#123; minifyEnabled false proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro' &#125; &#125;&#125;dependencies &#123; compile fileTree(dir: 'libs', include: ['*.jar']) compile 'com.android.support:appcompat-v7:25.0.1'&#125;apply from: \"bintrayUpload.gradle\" Module根文件夹下新建bintrayUpload.gradle，拷贝以下内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138apply plugin: 'com.github.dcendents.android-maven'apply plugin: 'com.jfrog.bintray'//加载属性文件Properties properties = new Properties()File localPropertiesFile = project.file(\"bintray.properties\");if (localPropertiesFile.exists()) &#123; properties.load(localPropertiesFile.newDataInputStream())&#125;File projectPropertiesFile = project.file(\"project.properties\");if (projectPropertiesFile.exists()) &#123; properties.load(projectPropertiesFile.newDataInputStream())&#125;//读取属性def projectRepositoryName = properties.getProperty(\"project.repositoryName\")def projectName = properties.getProperty(\"project.name\")def projectGroupId = properties.getProperty(\"project.groupId\")def projectArtifactId = properties.getProperty(\"project.artifactId\")def projectVersionName = android.defaultConfig.versionNamedef projectPackaging = properties.getProperty(\"project.packaging\")def projectSiteUrl = properties.getProperty(\"project.siteUrl\")def projectGitUrl = properties.getProperty(\"project.gitUrl\")def developerId = properties.getProperty(\"developer.id\")def developerName = properties.getProperty(\"developer.name\")def developerEmail = properties.getProperty(\"developer.email\")def bintrayUser = properties.getProperty(\"bintray.user\")def bintrayApikey = properties.getProperty(\"bintray.apiKey\")def bintrayOrganizationId = properties.getProperty(\"bintray.organizationId\");def javadocName = properties.getProperty(\"javadoc.name\")/**这句代码一定要加否则会出现如下错误* Could not upload to 'https://api.bintray.com/content/coolcode/maven/LibUiBase/1.0.0/CommonLibrary/LibUiBase/1.0.0/LibUiBase-1.0.0.pom': HTTP/1.1 400 Bad Request [message:Unable to upload files: Maven group, artifact or version defined in the pom file do not match the file path 'CommonLibrary/LibUiBase/1.0.0/LibUiBase-1.0.0.pom']* */group = projectGroupId// 配置生成POM.xml文件的参数install &#123; repositories.mavenInstaller &#123; pom &#123; project &#123; name projectName groupId projectGroupId artifactId projectArtifactId version projectVersionName packaging projectPackaging url projectSiteUrl licenses &#123; license &#123; name 'The Apache Software License, Version 2.0' url 'http://www.apache.org/licenses/LICENSE-2.0.txt' &#125; &#125; developers &#123; developer &#123; id developerId name developerName email developerEmail &#125; &#125; scm &#123; connection projectGitUrl developerConnection projectGitUrl url projectSiteUrl &#125; &#125; &#125; &#125;&#125;tasks.withType(Javadoc) &#123; options.addStringOption('Xdoclint:none', '-quiet') options.addStringOption('encoding', 'UTF-8') options.addStringOption('charSet', 'UTF-8')&#125;//生成sources.jartask sourcesJar(type: Jar) &#123; from android.sourceSets.main.java.srcDirs classifier = 'sources'&#125;task javadoc(type: Javadoc) &#123; source = android.sourceSets.main.java.srcDirs classpath += project.files(android.getBootClasspath().join(File.pathSeparator))&#125;//生成javadoc.jartask javadocJar(type: Jar, dependsOn: javadoc) &#123; classifier = 'javadoc' from javadoc.destinationDir&#125;artifacts &#123; archives javadocJar archives sourcesJar&#125;//javadoc的配置javadoc &#123; options &#123; encoding \"UTF-8\" charSet 'UTF-8' author true version projectVersionName links \"http://docs.oracle.com/javase/7/docs/api\" title javadocName &#125;&#125;/**userOrg为bintray账号信息里面的Organization Id*repo为你创建的仓库名称* 如果上述两个字段写错了，则会出现下面类似的错误*Could not create package 'huangxuanheng/maven/fragmentstack': HTTP/1.1 404 Not Found [message:Repo 'maven' was not found]*** */bintray &#123; user = bintrayUser key = bintrayApikey configurations = ['archives'] pkg &#123; userOrg = bintrayOrganizationId repo = projectRepositoryName name = projectName websiteUrl = projectSiteUrl vcsUrl = projectGitUrl licenses = [\"Apache-2.0\"] publish = true &#125;&#125; 在Module根目录下，新建project.properties文件，添加以下内容，并自行修改对应参数 1234567891011121314151617#project#仓库名称，就是在bintray官网建立的仓库的名称project.repositoryName=仓库名称#bintray仓库里显示的项目名称project.name=name#项目组id，这个取的时候别跟别人的相冲突就行project.groupId=com.***.***#项目id,一般同project.nameproject.artifactId=name#打包类型project.packaging=aar#项目官方网站地址project.siteUrl=https://github.com/lianghuiyong/CustomUI#项目git地址project.gitUrl=https://github.com/lianghuiyong/CustomUI#生成的javadoc名称javadoc.name=CustomUI.Doc 在Module根目录下，新建bintray.properties文件，添加对应参数 12345678910111213141516#配置bintray账号相关信息#bintray用户名,不是登陆邮箱,是个人中心右上角显示的名字bintray.user=user#bintray的ApiKeybintray.apiKey=apiKey#bintray的Organization Idbintray.organizationId=organizationId#配置开发者信息#昵称developer.id=lianghuiyong#姓名developer.name=lianghuiyong#邮箱developer.email=lianghuiyong@outlook.com 提交 gradlew install gradlew bintrayUpload 将库添加到公共库进bintray，打开仓库对应的项目 add to JCenter send","tags":[{"name":"Android","slug":"Android","permalink":"http://lianghuiyong.online/tags/Android/"},{"name":"JCenter","slug":"JCenter","permalink":"http://lianghuiyong.online/tags/JCenter/"}]},{"title":"5.0侧栏顶部透明，仿网易云音乐效果。","date":"2016-12-16T02:19:52.000Z","path":"2016/12/16/5-0侧栏顶部透明，仿网易云音乐效果。/","text":"一. 主题1、基本主题123456&lt;style name=\"Base.AppTheme\" parent=\"Theme.AppCompat.Light.NoActionBar\"&gt; &lt;!--text style--&gt; &lt;item name=\"android:textColor\"&gt;@color/textColor&lt;/item&gt; &lt;item name=\"colorAccent\"&gt;@color/colorAccent&lt;/item&gt; &lt;item name=\"android:windowAnimationStyle\"&gt;@style/AnimationActivity&lt;/item&gt;&lt;/style&gt; 2、5.0以上系统适配主题和5.0以下的主题12345&lt;!--标题栏透明--&gt;&lt;style name=\"Base.TransParent\" parent=\"Base.AppTheme\"&gt; &lt;item name=\"android:windowDrawsSystemBarBackgrounds\"&gt;true&lt;/item&gt; &lt;item name=\"android:statusBarColor\"&gt;@android:color/transparent&lt;/item&gt;&lt;/style&gt; 123&lt;!--标题栏透明--&gt;&lt;style name=\"Base.TransParent\" parent=\"Base.AppTheme\"&gt;&lt;/style&gt; 3、页面 1234&lt;style name=\"TransParentTheme\" parent=\"Base.TransParent\"&gt; &lt;item name=\"colorPrimary\"&gt;@color/mainColorPrimary&lt;/item&gt; &lt;item name=\"colorPrimaryDark\"&gt;@color/mainColorPrimaryDark&lt;/item&gt;&lt;/style&gt; 二. 页面使用1234567891011121314&lt;android.support.v4.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/drawer_layout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;!--其他布局--&gt; &lt;......&gt; &lt;!--侧栏引用布局--&gt; &lt;include layout=\"@layout/nav_header_main\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:layout_gravity=\"start\"/&gt;&lt;/android.support.v4.widget.DrawerLayout&gt;","tags":[{"name":"Android","slug":"Android","permalink":"http://lianghuiyong.online/tags/Android/"}]},{"title":"OpenResty第一天，CentOS准备","date":"2016-11-05T09:39:12.000Z","path":"2016/11/05/OpenResty第一天，CentOS准备/","text":"1、使用虚拟机安装CentOS，并使用桥接方式链接网络2、编辑网络配置12cd /etc/sysconfig/network-scripts/vi ifcfg-eno16777736 更改12BOOTPROTO=DHCP -&gt; BOOTPROTO=staticONBOOT=no -&gt; ONBOOT=yes 增加 123456HWADDR=aa:bb:cc:dd:ee;ff //虚拟机的mac地址,在虚拟机的设置-网络中可以查看GATEWAY=192.168.0.1 //网关，需要和主机一致IPADDR=192.168.0.222 //虚拟机的ip,保持和主机一个网段NETMASK=255.255.255.0 //子网掩码DNS1=8.8.8.8 //DNSDNS2=114.114.114.114 //DNS 1、重启网络服务：service network restart2、试下：ping www.baidu.com 3、安装网络工具1yum install net-tools 4、安装SSH1yum install openssh-server -y 5、结语12本以为后面会以后端开发继续往前写的，后面发现其实自己工作重心和目前对自己开发有利的方向还是前端，恰巧这几天微信小程序可以开发，转而学习微信小程序了。后端是另一个开始，话说我也是Go的追逐者。","tags":[{"name":"OpenResty","slug":"OpenResty","permalink":"http://lianghuiyong.online/tags/OpenResty/"}]},{"title":"Git使用笔录","date":"2016-10-29T05:09:43.000Z","path":"2016/10/29/Git使用笔录/","text":"git工具下载：https://git-scm.com/download/配置git信息 12git config --global user.name \"Your name\"git config --global user.email \"Your email\" 1、git本地仓库初始化1234git initgit remote remove/add origin git仓库地址git pull origin master master //取远程主分支git pull origin Liang Liang //取远程Liang的分支 2、提交远程到仓库123git add .git commot -m \"提交信息\"git push origin MoLiang //提交到远程分支MoLiang 3、分支管理12git branch Liang //创建Liang的分支git branch origin/Liang //创建Liang的远程分支 4、合并主分区123git checkout master (主分支)git merge origin/MoLianggit push origin master:master //$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt; 5、回滚主分支1234$ git log 查看commit的sha1值+$ git reset 3a48e096339f5c840a8d15435ff88cbd11ccd31f$ git stash$ git push -f origin master","tags":[{"name":"版本管理","slug":"版本管理","permalink":"http://lianghuiyong.online/tags/版本管理/"},{"name":"Git","slug":"Git","permalink":"http://lianghuiyong.online/tags/Git/"}]}]